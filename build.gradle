plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application
    mainClassName = 'broadcom.hw.App'
}
jar {
    manifest {
        attributes(
                'Main-Class': 'broadcom.hw.App'
        )
    }
}

// ****************************************** //
// Game - The tests: classes and gradle tasks //
// that will validate players solution.       //
// ****************************************** //

//See: https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
sourceSets {
    game {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    gameImplementation.extendsFrom implementation
    gameRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    gameImplementation 'junit:junit:4.12'
}

class GameLevel extends Test {
    public GameLevel(){
        description 'Runs given level tests to validate players implementation.'
        group 'game'

        testClassesDirs = project.sourceSets.game.output.classesDirs
        classpath = project.sourceSets.game.runtimeClasspath
    }
}

task level1(type: GameLevel) {
    include "broadcom/game/Level1.class"
}

task level2(type: GameLevel) {
    include "broadcom/game/Level2.class"
    dependsOn level1
}



// **************************************************************** //
//                    *** Test logging ***                          //
// **************************************************************** //
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}